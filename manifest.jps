type: install
id: netbox
name: NetBox
homepage: https://github.com/netbox-community/netbox

categories:
  - apps/dev-and-admin-tools
  - apps/popular

description:
  text: "/texts/description.md?_r=1"
  short: "The premier source of truth powering network automation."

logo: /images/logo.png
baseUrl: https://raw.githubusercontent.com/Onemind-Services-LLC/netbox-jps/master

onBeforeInit: /scripts/beforeInit.js?_r=${fn.random}
onBeforeInstall: /scripts/beforeInstall.js?_r=${fn.random}

globals:
  dbPassword: ${fn.password}
  redisPassword: ${fn.password}
  apiToken: ${fn.password(40)}
  adminPassword: ${fn.password}
  secretKey: ${fn.password(50)}

nodes: definedInOnBeforeInstall

onAfterRedeployContainer:
  - setupHousekeeping
  - if ("${event.params.nodeGroup}".includes("cp")):
    - installLocalRequirements: ${event.params.nodeGroup}
    - installPluginRequirements: ${event.params.nodeGroup}
    - restartContainers:
        nodeGroup: ${event.params.nodeGroup}


onInstall:
  - addLimits
  - createDb
  - upload:
      - nodeGroup: cp
        sourcePath: ${baseUrl}/config/plugins.py
        destPath: /etc/netbox/config/plugins.py
      - nodeGroup: cp
        sourcePath: ${baseUrl}/config/logging.py
        destPath: /etc/netbox/config/logging.py
      - nodeGroup: cp
        sourcePath: ${baseUrl}/config/configuration.py
        destPath: /etc/netbox/config/configuration.py
  - createFile[cp]: /etc/netbox/config/plugins.yaml
  - createFile[cp]: /etc/netbox/config/disabled_plugins.yaml
  - createFile[cp]: /etc/netbox/local_requirements.txt
  - createFile[cp]: /etc/netbox/plugin_requirements.txt
  - setupHousekeeping
  - if ('${settings.deploymentType}' == 'production'):
      - setTriggers
      - install:
        - jps: /scripts/events.jps?_r=${fn.random}

  - forEach(env.nodes):
      if ("${@i.nodeGroup}".includes("cp")):
        set:
          cpAllNodeIds: ${@i.id}${this.sep:}${this.cpAllNodeIds:}
          sep: ','
  - env.control.AddContainerEnvVars[${this.cpAllNodeIds}]:
      vars:
        ENV_NAME: ${env.name}

  - forEach(env.nodes):
      if ("${@i.nodeGroup}".includes("cp")):
        if ("${@i.ismaster}" == "true"):
          set:
            cpMasterNodeIds: ${@i.id}${this.sep1:}${this.cpMasterNodeIds:}
            sep1: ','

  - env.control.ExecDockerRunCmd [${this.cpMasterNodeIds}]
  - cmd[${nodes.cp.master.id}]: |-
      while [ ! -f /opt/unit/unit.pid ]; do sleep 1; done

  - forEach(env.nodes):
      if ("${@i.nodeGroup}".includes("cp")):
        if ("${@i.ismaster}" != "true"):
          set:
            cpNodeIds: ${@i.id}${this.sep2:}${this.cpNodeIds:}
            sep2: ','

  - if ('${this.cpNodeIds:}'): env.control.ExecDockerRunCmd [${this.cpNodeIds}]
  - nginxConfig

actions:
  addLimits:
    - env.control.ApplyNodeGroupData [bl, cp, sqldb, cache]:
        data:
          isRequired: true

  installLocalRequirements:
    - cmd [${this}]: |-
        source /opt/netbox/venv/bin/activate
        pip install -r /etc/netbox/local_requirements.txt

  installPluginRequirements:
    - cmd [${this}]: |-
        source /opt/netbox/venv/bin/activate
        pip install -r /etc/netbox/plugin_requirements.txt

  nginxConfig:
    - replaceInFile:
        nodeMission: bl
        path: /etc/nginx/nginx-jelastic.conf
        replacements:
          - pattern: large_client_header_buffers [0-9]* [0-9]*k;
            replacement: large_client_header_buffers 4 64k;
    - restartContainers:
        nodeGroup: bl

  setTriggers:
    - log: Auto Scaling Triggers
    - script: /scripts/addTriggers.js
      nodeGroup: cp
      resourceType: CPU
      loadGrowth: ${settings.loadGrowth}
      cleanOldTriggers: true
      scaleDownLimit: ${nodes.cp.length}

  createDb:
    - cmd[${nodes.sqldb.master.id}]: |-
        psql -U webadmin -d postgres -c "CREATE DATABASE netbox;"
        psql -U webadmin -d postgres -c "CREATE USER netbox WITH PASSWORD '${globals.dbPassword}';"
        psql -U webadmin -d postgres -c "ALTER DATABASE netbox OWNER TO netbox;"
        psql -U webadmin -d postgres -c "GRANT CREATE ON SCHEMA public TO netbox;"

  setupHousekeeping:
    - cmd[${nodes.cp.master.id}]: |-
        housekeeping_script="/opt/netbox/housekeeping.sh"
        target_dir="/etc/cron.daily"
        target_script="${target_dir}/housekeeping.sh"

        # Check if the target directory exists
        if [ ! -d "$target_dir" ]; then
          echo "Target directory $target_dir does not exist."
          exit 1
        fi

        # Copy the appropriate script
        if [ -f "$housekeeping_script" ]; then
          echo "Copying housekeeping script to $target_dir"
          cp -fv "$housekeeping_script" "$target_script"
        else
            echo "Housekeeping script not found at $housekeeping_script"
            exit 1
        fi

success: /texts/success.md?_r=1
