type: install
name: Netbox By OneMind Services

ssl: true
settings:
  fields:
    - caption: Username
      name: username
      type: string
    - caption: Password
      name: password
      type: string
      inputType: password
    - caption: email
      type: string
      name: email
    - caption: OMS Github Token
      type: string
      name: oms_github_token
      inputType: password
    - caption: Database Password
      type: string
      name: database_password
      disabled: false
      inputType: password
      tooltip: "password for postgres database"
    - caption: Device Importer Plugin
      type: checkbox
      name: deviceImporter
      value: false
      disabled: false
      tooltip: ""
      showIf:
        true:
          - caption: Github Repo Name
            type: string
            name: repo_name
            disabled: false
            tooltip: "repo name in your organization"
          - caption: Github Repo Owner Name
            type: string
            name: repo_owner
            disabled: false
            tooltip: "repo name in your organization"
          - caption: Github Token
            type: string
            name: github_token
            disabled: false
            tooltip: "repo name in your organization"
            inputType: password
          - caption: Github Branch Name
            type: string
            name: branch
            disabled: false
            tooltip: "repo name in your organization"
    - caption: Azure SSO Plugin
      type: checkbox
      name: ls-addon
      value: false
      disabled: false
      tooltip: ""
      showIf:
        true:
          - caption: Social Auth AzureAD Oauth2 Key
            type: string
            name: oauth_key
            disabled: false
            tooltip: "Azure AD OAUTH2 Key"

          - caption: Social Auth AzureAD Oauth2 secret
            type: string
            name: oauth_secret
            disabled: false
            tooltip: "Azure AD OAUTH2 Secret"

          - caption: Azure Ad User flag by group is staff
            type: string
            name: azuread_user_flags_by_group_is_staff
            disabled: false
            tooltip: "Azure AD OAUTH2 Secret"

          - caption: azure ad user flags by group is superuser
            type: string
            name: azuread_user_flags_by_group_is_superuser
            disabled: false
            tooltip: "Azure AD OAUTH2 Secret"

          - caption: AzureAd Group map
            type: text
            name: azuread_group_map
            disabled: false
            tooltip: "Azure AD OAUTH2 Secret"

          - caption: Azuread Group Permission
            type: text
            name: azuread_group_permissions
            disabled: false
            tooltip: "Azure AD OAUTH2 Secret"
    - caption: Device Importer Plugin
      type: checkbox
      name: deviceSupport

actions:
  deviceImporterPluingConfig:
    - cmd[cp]: |-
        touch /tmp/log.txt

        pip install netbox-metatype-importer==0.0.5 >> /tmp/log.txt

        echo "========================" >> /tmp/log.txt
        echo "${settings.deviceSupport}" >> /tmp/log.txt

        cat <<EOF > /etc/netbox/config/plugins.py
        PLUGINS = [
          'netbox_metatype_importer','netbox_support'
        ]
        PLUGINS_CONFIG = {
          'netbox_metatype_importer': {
              'branch': '${settings.branch}',
              'github_token': '${settings.github_token}',
              'repo': '${settings.repo_name}',
              'repo_owner': '${settings.repo_owner}'
          }
        }
        EOF

        until curl -s localhost:8080 > /dev/null
        do
          sleep 3
        done
        python /opt/netbox/netbox/manage.py migrate >> /tmp/log.txt || true
      user: root

  singleSignOnConfig:
    - cmd[cp]: |-
        echo '${settings.azuread_group_map}' > /tmp/azuread_group_map.txt
        echo '${settings.azuread_group_permissions}' > /tmp/azuread_group_permissions.txt
        wget -O /etc/netbox/config/extra.py https://raw.githubusercontent.com/Onemind-Services-LLC/netbox-jps/master/extra.py
        
        apt-get install -y dos2unix
        permissions=$(cat /tmp/azuread_group_permissions.txt)

        sed -i "s/azuread_group_permissions_here/$(echo $(cut -c 3- <<< $(printf %q "$permissions")) | rev | cut -c2- | rev)/g" /etc/netbox/config/extra.py

        group_map=$(cat /tmp/azuread_group_map.txt)
        dos2unix /etc/netbox/config/extra.py
        sed -i "s/azuread_group_map_here/$(echo $(cut -c 3- <<< $(printf %q "$group_map")) | rev | cut -c2- | rev)/g" /etc/netbox/config/extra.py
        dos2unix /etc/netbox/config/extra.py
        sed -i 's*oauth_key_here*${settings.oauth_key}*g' /etc/netbox/config/extra.py
        sed -i 's*oauth_secret_here*${settings.oauth_secret}*g' /etc/netbox/config/extra.py
        sed -i 's*azuread_user_flags_by_group_is_staff_here*${settings.azuread_user_flags_by_group_is_staff}*g' /etc/netbox/config/extra.py
        sed -i 's*azuread_user_flags_by_group_is_superuser_here*${settings.azuread_user_flags_by_group_is_superuser}*g' /etc/netbox/config/extra.py
      user: root

  netboxSupportPlugin:
    - cmd[cp]: |-
        echo 'machine github.com login ${settings.oms_github_token}' >> ~/.netrc
        pip install git+https://github.com/Onemind-Services-LLC/netbox-support

        git clone https://github.com/Onemind-Services-LLC/netbox-support.git
        cp ~/netbox-support/scripts/eox-eol.py  /opt/netbox/netbox/scripts/
        apt-get update
        apt-get install git -y
        pip install git+https://github.com/Onemind-Services-LLC/netbox-support

        git clone https://github.com/Onemind-Services-LLC/netbox-support.git
        mkdir -p /etc/netbox/scripts
        cp ~/netbox-support/scripts/eox-eol.py  /etc/netbox/scripts
      user: root

  createSuperUser:
    - cmd[cp]: |-
        echo "$(date) - createSuperUser called start" >> /tmp/log.txt
        echo "$(date) - preparePluginsPy called start" >> /tmp/log.txt
        export user_passowrd='${settings.password}'
        if [[ -n ${user_passowrd} ]]
        then
          export DJANGO_SUPERUSER_PASSWORD=${user_passowrd}
        fi
        until curl -s localhost:8080 > /dev/null
        do
          sleep 3
        done
        echo "$(date) Create super user called - start " >>  /tmp/log.txt
        python /opt/netbox/netbox/manage.py createsuperuser --noinput --username '${settings.username}' --email '${settings.email}' 2>&1 >> /tmp/log.txt
        echo "$(date) - createSuperUser called end" >> /tmp/log.txt
      user: root

  startServicesInBackground:
    - cmd[cp]: |-
        echo "$(date) - startServicesInBackground called start" >> /tmp/log.txt
        apt-get update 2>&1 >> /tmp/log.txt
        apt-get install -y at 2>&1 >> /tmp/log.txt
        service atd start 2>&1 >> /tmp/log.txt
        echo "/opt/netbox/housekeeping.sh" | at now
        echo "python /opt/netbox/netbox/manage.py rqworker" | at now
        echo "$(date) - startServicesInBackground called end" >> /tmp/log.txt
      user: root

onInstall:
  - netboxSupportPlugin
  - deviceImporterPluingConfig
  - singleSignOnConfig
  - createSuperUser
  - startServicesInBackground
  - restartNodes [cp]

success:
  text: |-
    Superuser Create with below details
    **username** = '${settings.username}'
    **password** = '${settings.password}'
  email: true

nodes:
  - docker:
      image: postgres:15-alpine
      volumes:
        - "/var/lib/postgresql/data"
      env:
        POSTGRES_DB: netbox
        POSTGRES_PASSWORD: "${settings.database_password}"
        POSTGRES_USER: netbox
    cloudlets: 6
    diskLimit: 200G
    displayName: postgres
    scalingMode: STATELESS
    isSLBAccessEnabled: true
    nodeGroup: sqldb
    mission: sqldb

  - docker:
      image: redis:7-alpine
      volumes:
        - "/data"
      # env:
      #   REDIS_PASSWORD: t4Ph722qJ5QHeQ1qfu36
    cloudlets: 4
    diskLimit: 200G
    displayName: redis-cache
    scalingMode: STATELESS
    isSLBAccessEnabled: true
    nodeGroup: nosqldb

  - docker:
      image: redis:7-alpine
      volumes:
        - "/data"
      # env:
      #   REDIS_PASSWORD: H733Kdjndks81
    cloudlets: 4
    diskLimit: 200G
    displayName: redis
    mission: nosqldb
    scalingMode: STATELESS
    isSLBAccessEnabled: true
    nodeGroup: cache

  - docker:
      volumes:
        - /etc/netbox/config
        - /opt/netbox/netbox/media
        - /opt/netbox/netbox/reports
        - /opt/netbox/netbox/scripts
      links:
        - cache:redis
        - sqldb:postgres
        - nosqldb:rediscache
      image: netboxcommunity/netbox:v3.4-2.5.3
      env:
        CORS_ORIGIN_ALLOW_ALL: "True"
        DB_HOST: postgres
        DB_NAME: netbox
        DB_PASSWORD: "${settings.database_password}"
        DB_USER: netbox
        EMAIL_FROM: netbox@bar.com
        EMAIL_PASSWORD: ""
        EMAIL_PORT: "25"
        EMAIL_SERVER: localhost
        EMAIL_SSL_CERTFILE: ""
        EMAIL_SSL_KEYFILE: ""
        EMAIL_TIMEOUT: "5"
        EMAIL_USE_SSL: "false"
        EMAIL_USE_TLS: "false"
        EMAIL_USERNAME: netbox
        GRAPHQL_ENABLED: "true"
        HOUSEKEEPING_INTERVAL: "86400"
        MEDIA_ROOT: /opt/netbox/netbox/media
        METRICS_ENABLED: "false"
        REDIS_CACHE_DATABASE: "1"
        REDIS_CACHE_HOST: rediscache
        REDIS_CACHE_INSECURE_SKIP_TLS_VERIFY: "false"
        REDIS_CACHE_SSL: "false"
        REDIS_DATABASE: "0"
        REDIS_HOST: redis
        REDIS_INSECURE_SKIP_TLS_VERIFY: "false"
        REDIS_SSL: "false"
        RELEASE_CHECK_URL: https://api.github.com/repos/netbox-community/netbox/releases
        SECRET_KEY: r(m)9nLGnz$$(_q3N4z1k(EFsMCjjjzx08x9VhNVcfd%6RF#r!6DE@+V5Zk2X
        SKIP_SUPERUSER: "true"
        WEBHOOKS_ENABLED: "true"

    fixedCloudlets: 14
    cloudlets: 84
    diskLimit: 200G
    scalingMode: STATEFUL
    isSLBAccessEnabled: true
    nodeGroup: cp
    mission: cp
  - docker:
    tag: 1.24.0
    cloudlets: 4
    diskLimit: 200G
    scalingMode: STATEFUL
    isSLBAccessEnabled: true
    nodeType: nginx-dockerized
    nodeGroup: bl
